{"version":3,"sources":["components/GraphicCard.js","components/Timer.js","components/GcOne.js","App.js","reportWebVitals.js","index.js"],"names":["GraphicCard","React","memo","name","status","image","link","className","target","rel","href","src","alt","Timer","useState","value","setValue","date","Date","now","onComplete","uuidv4","GcOne","data","setData","useEffect","fetchData","a","axios","get","result","interval","setInterval","clearInterval","map","e","gc","App","id","onChange","event","defaultValue","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAgBeA,G,MAdKC,IAAMC,MAAK,YAAoC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACrD,OACE,mBAAGC,UAAU,SAASC,OAAO,SAASC,IAAI,aAAaC,KAAMJ,EAA7D,SACE,sBAAKC,UAAU,OAAf,UACE,6BAAKJ,IACL,mBAAGI,UAAsB,YAAXH,EAAuB,WAAa,aAAlD,SACGA,IAEH,qBAAKG,UAAU,QAAQI,IAAKN,EAAOO,IAAKT,a,gBCNjC,SAASU,IAAS,IAAD,EACJC,mBAAS,GADL,mBACvBC,EADuB,KAChBC,EADgB,KAG9B,OACE,qBAAIT,UAAU,cAAd,8BACoB,GAClB,sBAAMA,UAAU,QAAhB,SACE,cAAC,IAAD,CAEEU,KAAMC,KAAKC,MAAQ,IACnBC,WAAY,kBAAMJ,EAASK,iBAFtBN,QC+BAO,MApCf,YAA2B,IAAVP,EAAS,EAATA,MAAS,EACAD,mBAAS,MADT,mBACjBS,EADiB,KACXC,EADW,KAgBxB,OAbAC,qBAAU,WACR,IAAMC,EAAS,uCAAG,4BAAAC,EAAA,sEACKC,IAAMC,IAAI,IAAMd,GADrB,OACVe,EADU,OAGhBN,EAAQM,EAAOP,MAHC,2CAAH,qDAKfG,IACA,IAAMK,EAAWC,aAAY,WAC3BN,MACC,KACH,OAAO,kBAAMO,cAAcF,MAC1B,CAAChB,IAGF,sBAAKR,UAAU,MAAf,UACE,qBAAIA,UAAU,QAAd,kBAA4BQ,EAA5B,gBACA,cAACF,EAAD,IACA,qBAAKN,UAAU,YAAf,SACGgB,GACCA,EAAKW,KAAI,SAACC,GAAD,OACP,cAAC,EAAD,CAEEhC,KAAMgC,EAAEC,GACRhC,OAAQ+B,EAAE/B,OACVC,MAAO8B,EAAE9B,MACTC,KAAM6B,EAAE7B,MAJHe,wBCHJgB,MAvBf,WAAgB,IAAD,EACavB,mBAAS,QADtB,mBACNC,EADM,KACCC,EADD,KAOb,OACE,sBAAKT,UAAU,MAAf,UACE,yBACEJ,KAAK,KACLmC,GAAG,cACH/B,UAAU,cACVgC,SAVe,SAACC,GACpBxB,EAASwB,EAAMhC,OAAOO,QAKpB,UAME,wBAAQ0B,aAAa,OAArB,kBACA,wBAAQ1B,MAAM,OAAd,qBAEF,cAAC,EAAD,CAAOA,MAAOA,QCXL2B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.3a9a1758.chunk.js","sourcesContent":["import React from \"react\";\n\nconst GraphicCard = React.memo(({ name, status, image, link }) => {\n  return (\n    <a className=\"gclink\" target=\"_blank\" rel=\"noreferrer\" href={link}>\n      <div className=\"card\">\n        <h3>{name}</h3>\n        <p className={status !== \"Rupture\" ? \"en-stock\" : \"en-rupture\"}>\n          {status}\n        </p>\n        <img className=\"image\" src={image} alt={name} />\n      </div>\n    </a>\n  );\n});\n\nexport default GraphicCard;\n","import React, { useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Countdown from \"react-countdown\";\n\nexport default function Timer() {\n  const [value, setValue] = useState(0);\n\n  return (\n    <h2 className=\"title-timer\">\n      Next refresh in: {\"\"}\n      <span className=\"timer\">\n        <Countdown\n          key={value}\n          date={Date.now() + 30000}\n          onComplete={() => setValue(uuidv4())}\n        />\n      </span>\n    </h2>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport \"../App.css\";\nimport GraphicCard from \"./GraphicCard\";\nimport Timer from \"./Timer\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nfunction GcOne({ value }) {\n  const [data, setData] = useState(null);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const result = await axios.get(\"/\" + value);\n      // console.log(result.data);\n      setData(result.data);\n    };\n    fetchData();\n    const interval = setInterval(() => {\n      fetchData();\n    }, 30000);\n    return () => clearInterval(interval);\n  }, [value]);\n\n  return (\n    <div className=\"App\">\n      <h1 className=\"title\">LDLC {value} G.C stock</h1>\n      <Timer />\n      <div className=\"container\">\n        {data &&\n          data.map((e) => (\n            <GraphicCard\n              key={uuidv4()}\n              name={e.gc}\n              status={e.status}\n              image={e.image}\n              link={e.link}\n            />\n          ))}\n      </div>\n    </div>\n  );\n}\n\nexport default GcOne;\n","import { useState } from \"react\";\nimport GcOne from \"./components/GcOne\";\n\nimport \"./App.css\";\n\nfunction App() {\n  const [value, setValue] = useState(\"3080\");\n\n  const handleChange = (event) => {\n    setValue(event.target.value);\n  };\n\n  return (\n    <div className=\"App\">\n      <select\n        name=\"gc\"\n        id=\"gc-selector\"\n        className=\"gc-selector\"\n        onChange={handleChange}\n      >\n        <option defaultValue=\"3080\">3080</option>\n        <option value=\"3090\">3090</option>\n      </select>\n      <GcOne value={value} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}